<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on Izydog documentation</title><link>/docs/conventions/typescript/</link><description>Recent content in Typescript on Izydog documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 16 Dec 2022 01:04:15 +0000</lastBuildDate><atom:link href="/docs/conventions/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>External documentation</title><link>/docs/conventions/typescript/external/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/external/</guid><description>Bible of clean code JS
Typescript version</description></item><item><title>Base Typescript coding style guide</title><link>/docs/conventions/typescript/basecodingstyle/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/basecodingstyle/</guid><description>Naming Conventions link camelCase myFunction PascalCase MyFunction snake_case my_function kebab-case my-function Use camelCase for variable and function names let fooVar; function barFunc() { } Use camelCase of class members, interface members, methods and methods parameters class Foo { bar: number; baz() { } } Use PascalCase for class names and interface names. class Foo { } Use PascalCase for enums and camelCase for enum members enum NotificationTypes { default = 0, info = 1, success = 2, error = 3, warning = 4 } Code Comments link So when you find yourself in a position where you need to write a comment, think it through and see whether there isn&amp;rsquo;t some way to turn the tables and express yourself in code.</description></item><item><title>Formating style guide</title><link>/docs/conventions/typescript/formatingstyle/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/formatingstyle/</guid><description>The TypeScript compiler ships with a very nice formatting language service. Whatever output it gives by default is good enough to reduce the cognitive overload on the team. Use tsfmt to automatically format your code on the command line. Also, your IDE (atom/vscode/vs/sublime) already has formatting support built-in.
Examples:
// Space before type i.e. foo:&amp;lt;space&amp;gt;string const foo: string = &amp;#34;hello&amp;#34;; Quotes linkPrefer single quotes (&amp;rsquo;) unless escaping.
Spaces linkUse 2 spaces.</description></item><item><title>More beautiful coding style guide</title><link>/docs/conventions/typescript/morestyle/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/morestyle/</guid><description>Organize imports linkWith clean and easy to read import statements you can quickly see the dependencies of current code. Make sure you apply following good practices for import statements:
Unused imports should be removed. Groups of imports are delineated by one blank line before and after. Groups must respect following order: Angular imports (i.e. import { HttpClient } from &amp;lsquo;@angular/common/http&amp;rsquo;) Angular material imports (i.e. import { MatSelectChange } from &amp;lsquo;@angular/material/select&amp;rsquo;) 3rd party imports except rxjs (i.</description></item></channel></rss>