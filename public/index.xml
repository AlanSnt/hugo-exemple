<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Izydog documentation</title><link>/</link><description>Recent content on Izydog documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 01 Jul 2023 14:09:15 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>External documentation</title><link>/docs/conventions/typescript/external/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/external/</guid><description>Bible of clean code JS
Typescript version</description></item><item><title>Semantic Commit Messages</title><link>/docs/conventions/github/semantic/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/github/semantic/</guid><description>See how a minor change to your commit message style can make you a better programmer.
Title linkFormat: &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;issue-id&amp;gt; &amp;lt;subject&amp;gt;
&amp;lt;scope&amp;gt; is optional and allows to specify the scope of the change. &amp;lt;issue-id&amp;gt; is optional set ISSUE in relation of this commit
Example link feat(table): ISSUE-1425 add hat wobble
^--^^-----^ ^--------^ ^------------^
| | | |
| | | &amp;#43;-&amp;gt; Summary in present tense.
| | |
| | &amp;#43;-&amp;gt; Github issue ID.</description></item><item><title>Keycloak</title><link>/docs/services/keycloak/</link><pubDate>Fri, 30 Sep 2022 05:33:22 +0100</pubDate><guid>/docs/services/keycloak/</guid><description>Context linkDescription linkKeycloak is an open source identity and access management platform that provides authentication, authorization, and security features for applications and services. It allows users to authenticate with different protocols such as OpenID Connect, OAuth 2.0, and SAML, and provides user, role, and group management features. Keycloak can be used as a standalone identity server or integrated into Java, Node.js, and other platforms. Features linkKeycloak provides a range of features, including:</description></item><item><title>Overview</title><link>/docs/conventions/overview/</link><pubDate>Fri, 30 Sep 2022 05:33:22 +0100</pubDate><guid>/docs/conventions/overview/</guid><description>This page outlines the conventions and standards used in the development of the application. It is intended for developers and technical team members who are involved in designing, building, and maintaining the application.
The conventions cover naming conventions for variables, functions, and files, as well as coding style guidelines and best practices for documentation and commenting. Adhering to these conventions helps ensure that the code is consistent and maintainable, and makes it easier for other developers to understand and work with the codebase.</description></item><item><title>Overview</title><link>/docs/databases/overview/</link><pubDate>Fri, 30 Sep 2022 05:33:22 +0100</pubDate><guid>/docs/databases/overview/</guid><description>Here you will find the models of all the databases we will create
Exemples linkUsers link Column Name Data Type Description id integer Unique ID for the user username string User&amp;rsquo;s username email string User&amp;rsquo;s email address password string User&amp;rsquo;s password (hashed) created_at datetime Date and time the user was created updated_at datetime Date and time the user was last updated Roles link Column Name Data Type Description id integer Unique ID for the role name string Role name description string Role description User Roles link Column Name Data Type Description user_id integer ID of the user role_id integer ID of the role Products link Column Name Data Type Description id integer Unique ID for the product name string Product name description string Product description price decimal Product price created_at datetime Date and time the product was created updated_at datetime Date and time the product was last updated Orders link Column Name Data Type Description id integer Unique ID for the order user_id integer ID of the user who placed the order total_price decimal Total price of the order created_at datetime Date and time the order was created updated_at datetime Date and time the order was last updated</description></item><item><title>Overview</title><link>/docs/overview/</link><pubDate>Fri, 30 Sep 2022 05:33:22 +0100</pubDate><guid>/docs/overview/</guid><description>This documentation provides an overview of the architecture of the application and the technologies used to implement it. It is intended for developers and technical team members who are involved in designing, building, and maintaining the application.
The documentation covers the high-level architecture of the application, including its components, data flows, and interactions between different parts. It also includes detailed information on the technology stack used to implement the application, such as programming languages, frameworks, libraries, and databases.</description></item><item><title>Base Typescript coding style guide</title><link>/docs/conventions/typescript/basecodingstyle/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/basecodingstyle/</guid><description>Naming Conventions link camelCase myFunction PascalCase MyFunction snake_case my_function kebab-case my-function Use camelCase for variable and function names let fooVar; function barFunc() { } Use camelCase of class members, interface members, methods and methods parameters class Foo { bar: number; baz() { } } Use PascalCase for class names and interface names. class Foo { } Use PascalCase for enums and camelCase for enum members enum NotificationTypes { default = 0, info = 1, success = 2, error = 3, warning = 4 } Code Comments link So when you find yourself in a position where you need to write a comment, think it through and see whether there isn&amp;rsquo;t some way to turn the tables and express yourself in code.</description></item><item><title>Pets</title><link>/docs/databases/models/pet/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/databases/models/pet/</guid><description> Column Name Data Type Primary Foreign Unique Description id uuid ✅ ❌ ✅ Unique ID for the user user_id uuid ❌ ✅ ❌ ID for the user name string ❌ ❌ ❌ Pet&amp;rsquo;s name created_at datetime ❌ ❌ ❌ Date and time the user was created updated_at datetime ❌ ❌ ❌ Date and time the user was last updated</description></item><item><title>Repository naming</title><link>/docs/conventions/github/naming/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/github/naming/</guid><description>We follow internal conventions for repository naming to easily identify the scope of each repository.
List of Types of Production Repositorie link RepositoryType Full name Description Service Service Anything related to recurrent tools/services App App Backend Application MApp Mobile App Mobile Application WApp Web App Web Application How to Name Your Repository linkTo name your repository, simply follow this rule:
{ConcernedProject}{RepositoryType}
Examples : link If you are creating a service for backups, the name should be BackupService.</description></item><item><title>User</title><link>/docs/databases/models/user/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/databases/models/user/</guid><description> Column Name Data Type Primary Foreign Unique Description id uuid ✅ ❌ ✅ Unique ID for the user sso_id uuid ❌ ❌ ✅ Unique ID for the user set by keycloak username string ❌ ❌ ❌ User&amp;rsquo;s username firstname string ❌ ❌ ❌ User&amp;rsquo;s firstname lastname string ❌ ❌ ❌ User&amp;rsquo;s lastname email string ❌ ❌ ❌ User&amp;rsquo;s email address created_at datetime ❌ ❌ ❌ Date and time the user was created updated_at datetime ❌ ❌ ❌ Date and time the user was last updated</description></item><item><title>Quickstart</title><link>/docs/quickstart/</link><pubDate>Thu, 08 Jun 2023 19:25:22 +0100</pubDate><guid>/docs/quickstart/</guid><description>Requirements link git Go ≥ v1.19 Hugo ≥ v0.100.0 (Extended Version) Install Hugo linkInstall the Hugo CLI, using the specific instructions for your operating system below:
Linux Homebrew (macOS) Windows (Chocolatey) Windows (Scoop) Your Linux distro’s package manager may include Hugo. If this is the case, install it directly using your distro’s package manager – for instance, in Ubuntu, run the following command. This will install the extended edition of Hugo:</description></item><item><title>Monitoring</title><link>/docs/services/monitoring/</link><pubDate>Fri, 30 Sep 2022 05:33:22 +0100</pubDate><guid>/docs/services/monitoring/</guid><description/></item><item><title>Formating style guide</title><link>/docs/conventions/typescript/formatingstyle/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/formatingstyle/</guid><description>The TypeScript compiler ships with a very nice formatting language service. Whatever output it gives by default is good enough to reduce the cognitive overload on the team. Use tsfmt to automatically format your code on the command line. Also, your IDE (atom/vscode/vs/sublime) already has formatting support built-in.
Examples:
// Space before type i.e. foo:&amp;lt;space&amp;gt;string const foo: string = &amp;#34;hello&amp;#34;; Quotes linkPrefer single quotes (&amp;rsquo;) unless escaping.
Spaces linkUse 2 spaces.</description></item><item><title>Architecture of plateform</title><link>/docs/architecture/</link><pubDate>Thu, 08 Jun 2023 19:25:22 +0100</pubDate><guid>/docs/architecture/</guid><description>This documentation provides an overview of the architecture of the application and the technologies used to implement it. It is intended for developers and technical team members who are involved in designing, building, and maintaining the application.
Architecture design link Agregator link In a microservices-based architecture, the aggregator is a component that collects and combines data from multiple different microservices to provide a consistent and complete view of information. It will also perform data transformation and filtering operations, as well as manage data caching to improve performance and reduce load on underlying services.</description></item><item><title>More beautiful coding style guide</title><link>/docs/conventions/typescript/morestyle/</link><pubDate>Sat, 01 Jul 2023 14:09:15 +0000</pubDate><guid>/docs/conventions/typescript/morestyle/</guid><description>Organize imports linkWith clean and easy to read import statements you can quickly see the dependencies of current code. Make sure you apply following good practices for import statements:
Unused imports should be removed. Groups of imports are delineated by one blank line before and after. Groups must respect following order: Angular imports (i.e. import { HttpClient } from &amp;lsquo;@angular/common/http&amp;rsquo;) Angular material imports (i.e. import { MatSelectChange } from &amp;lsquo;@angular/material/select&amp;rsquo;) 3rd party imports except rxjs (i.</description></item><item><title>Deployment</title><link>/docs/deployment/</link><pubDate>Thu, 08 Jun 2023 19:25:22 +0100</pubDate><guid>/docs/deployment/</guid><description>Here are the deployment steps on the hosting platform of Izydog company
warning Editing in progress: This page need to be tested and validate or fix it Database migrations linkNeeds to be redacted
Setup new application linkAdding new apps is done in 2 steps :
Application containerization linkIf you application is based on the app template, it must have already have a Dockerfile and the corresponding CI in order to build and push your app docker image into the registry.</description></item></channel></rss>